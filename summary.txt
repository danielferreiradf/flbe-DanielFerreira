Summary

- Cloned the repository and started it using npm init.
- Installed Express and Nodemon packages. Both packages will be used to created a production and development server.
- Created .gitignore file and added which folders to make git ignore them.
- Moved users.csv and items.csv to a folder called database, making it more organized.
- Created server.js and routes.js files, to start making the backend server and its routes.
- Added scripts for development server and start server inside the package.json file.
- Decided to use the MVC pattern, creating a new folder called controllers inside the app folder, the controllers within the MVC pattern,
holds the responsibilty of logic and business rules of our application.
- Created the server.js, containing the App class with the methods to run the routes and middlewares. Added both methods inside 
the constructor class function that will make the server and methods to be run when App class is instanciated.
- Created an instance of the App class and passed to it which PORT will be used, checking if there is a environment 
variable (usually found within production enviroment) and if it is not found, the standard PORT is set to 5000.
- Imported the SearchController in the routes file, to create the routes based on the methods from the controller.
- Created the routes "/search" using the http method GET.
- Installed neat-csv library to handle csv files.
- Updated searchItems methods to load csv files, by import path and fs core modules of Node.js, to read files from the computer directory.
- Parsed loaded files into an array of JavaScript objects using neat-csv.
- Filtered the array using the searchTerm passed through the query parameter, through the request parameter received over the route.
- Sliced the results to return only 20 results using the slice method of JavaScript arrays.
- With the items filtered, added a map to loop over them and find each item owner relating the item user to the user with user_id in users table.
- Installed Jest and Supertest libraries to create a test suite.
- Setup the tests and created folder __tests__ with file search.test.js to store them.
- Added tests to test the App functionalities, such as parse csv files to javascript array of objects, 
call the api endpoint "/search" using query with searchTerm provided by a mock property and test to check
 with return data contains 20 results within the array.

 Notes:

 - The challenge requested to use TypeScript. Right now, I am not totally confident to use it, but I know how important it is
 to secure the application of reducing bugs, having a better code for the team and makes it great to scale the project. Thefore, 
 I am willing to improve such skills and it is already in my plans to become confident using that.
 - I used slice to make the endpoint to return only 20 items. But for a production application a better approach is to use pagination,
 returning all results but limiting the number of them by simulating pages, requested by the frontend.